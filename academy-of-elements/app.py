# app.py
import asyncio
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from aiogram import Dispatcher, Bot
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.user_handlers import cmd_start, select_faction
from handlers.building_handlers import cmd_buildings, cmd_build, cmd_upgrade
from handlers.wizard_handlers import cmd_profile, cmd_wizards, cmd_spells, cmd_research, cmd_cancel_research, cmd_hire_wizard
from handlers.city_handler import open_city
from api.building_api import api_build

def create_app(dp: Dispatcher, bot: Bot) -> FastAPI:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ---
    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # –ö–æ–¥ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        print("üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤.")
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        task = asyncio.create_task(dp.start_polling(bot))
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        yield
        # –ö–æ–¥ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass
        print("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    app = FastAPI(lifespan=lifespan)

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ ---
    # User handlers
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(select_faction, Command("fire", "water", "wind", "earth"))

    # Building handlers
    dp.message.register(cmd_buildings, Command("buildings"))
    dp.message.register(cmd_build, Command("build"))
    dp.message.register(cmd_upgrade, Command("upgrade"))

    # Wizard handlers
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_wizards, Command("wizards"))
    dp.message.register(cmd_spells, Command("spells"))
    dp.message.register(cmd_research, Command("research"))
    dp.message.register(cmd_cancel_research, Command("cancel_research"))
    dp.message.register(cmd_hire_wizard, Command("hire_wizard"))

    # City handler
    dp.message.register(open_city, Command("city"))

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS ---
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã origins (—É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
    origins = [
        "https://academy-of-elements.vercel.app",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]

    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # --- FastAPI Endpoints ---
    # –†–æ—É—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    @app.get("/")
    async def read_index():
        return FileResponse("web/index.html")

    @app.get("/city")
    async def read_city():
        return FileResponse("web/index.html")

    # API endpoints
    @app.get("/api/health")
    async def health_check():
        return {"status": "ok", "message": "FastAPI —Å–µ—Ä–≤–µ—Ä Academy of Elements —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

    @app.get("/api/test")
    async def test_api():
        return {"message": "FastAPI API —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API endpoint –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    app.post("/api/build")(api_build)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ web
    web_dir = "web"
    if os.path.isdir(web_dir):
        # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫—É web –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        app.mount("/static", StaticFiles(directory=web_dir), name="static")
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π
        app.mount("/images", StaticFiles(directory=os.path.join(web_dir, "images")), name="images")
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π (–∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è)
        # app.mount("/spells", StaticFiles(directory=os.path.join(web_dir, "spells")), name="spells")
        print(f"üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ '{web_dir}'")
    else:
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ '{web_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è.")

    return app