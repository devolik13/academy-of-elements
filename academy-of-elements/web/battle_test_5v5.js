// web/battle_test_5v5.js

/**
 * –°–∏–º—É–ª—è—Ç–æ—Ä –±–æ—è "–õ–∏–Ω–∏—è –°—Ä–∞–∂–µ–Ω–∏—è" 5 –Ω–∞ 5
 *
 * –ü—Ä–∞–≤–∏–ª–∞:
 * 1. –î–≤–µ –ª–∏–Ω–∏–∏ –ø–æ 5 –º–∞–≥–æ–≤.
 * 2. –ú–∞–≥–∏ —Å—Ç–æ—è—Ç –≤ —è—á–µ–π–∫–∞—Ö, –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—Ç–∞–∫–∏ –∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–ª—å.
 * 3. –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –±–æ—è (–∏–≥—Ä–æ–∫ A) –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–¥–Ω–∏–º –º–∞–≥–æ–º.
 * 4. –ó–∞—Ç–µ–º –∏–≥—Ä–æ–∫–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∞—Ç–∞–∫—É—é—Ç –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –¥–≤–∞ –º–∞–≥–∞.
 * 5. –ú–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —Ü–µ–ª—å –Ω–∞–ø—Ä–æ—Ç–∏–≤. –ï—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏—â–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∂–∏–≤—É—é —Ü–µ–ª—å, –¥–≤–∏–≥–∞—è—Å—å –≤–ª–µ–≤–æ –ø–æ –ª–∏–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
 *    –ï—Å–ª–∏ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –Ω–∞—á–∞–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å –∫–æ–Ω—Ü–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫).
 * 6. –ë–æ–π –∏–¥–µ—Ç –ø–æ —Ä–∞—É–Ω–¥–∞–º, –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ 6 —Ñ–∞–∑.
 * 7. –ë–æ–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –º–∞–≥–∏ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –º–µ—Ä—Ç–≤—ã.
 * 8. –í—Å–µ –º–∞–≥–∏ –∏–º–µ—é—Ç 100 HP –∏ –Ω–∞–Ω–æ—Å—è—Ç 20 —É—Ä–æ–Ω–∞.
 */

(function(global) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º IIFE –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏

    /**
     * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞
     * @typedef {Object} Wizard
     * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –º–∞–≥–∞
     * @property {number} hp - –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
     * @property {number} maxHp - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
     * @property {number} damage - –ù–∞–Ω–æ—Å–∏–º—ã–π —É—Ä–æ–Ω
     * @property {string} name - –ò–º—è –º–∞–≥–∞
     * @property {string} spell - –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞–≥–∞
     */


    /**
     * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
     * @typedef {Object} Player
     * @property {string} id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
     * @property {string} name - –ò–º—è –∏–≥—Ä–æ–∫–∞
     * @property {Array<Wizard>} wizards - –ú–∞—Å—Å–∏–≤ –º–∞–≥–æ–≤ –∏–≥—Ä–æ–∫–∞
     */


    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
     * @typedef {Object} BattleState
     * @property {Player} playerA - –ò–≥—Ä–æ–∫ A (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)
     * @property {Player} playerB - –ò–≥—Ä–æ–∫ B
     * @property {number} currentRound - –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @property {number} currentPhase - –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã (1-6)
     * @property {Array<string>} log - –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –±–æ—è
     */


    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è 5 –Ω–∞ 5
     * @param {Player} initiator - –ò–≥—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –±–æ–π
     * @param {Player} opponent - –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
     * @returns {BattleState}
     */
    function initializeBattle5v5(initiator, opponent) {
        // –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const playerA = JSON.parse(JSON.stringify(initiator));
        const playerB = JSON.parse(JSON.stringify(opponent));

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∏–∑ –Ω–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
        let trueInitiator, trueOpponent;
        if (playerA.id === initiator.id) {
            trueInitiator = playerA;
            trueOpponent = playerB;
        } else {
            trueInitiator = playerB;
            trueOpponent = playerA;
        }

        return {
            playerA: trueInitiator,
            playerB: trueOpponent,
            currentRound: 1,
            currentPhase: 1,
            log: [`–ë–æ–π –Ω–∞—á–∞–ª—Å—è! ${trueInitiator.name} –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º.`]
        };
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª—å –¥–ª—è –º–∞–≥–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º "–õ–∏–Ω–∏–∏ –°—Ä–∞–∂–µ–Ω–∏—è"
     * @param {Wizard} attacker - –ê—Ç–∞–∫—É—é—â–∏–π –º–∞–≥
     * @param {number} attackerIndex - –ò–Ω–¥–µ–∫—Å –∞—Ç–∞–∫—É—é—â–µ–≥–æ –º–∞–≥–∞ –≤ —Å–≤–æ–µ–π –ª–∏–Ω–∏–∏ (0-4)
     * @param {Array<Wizard>} opponentWizards - –ú–∞—Å—Å–∏–≤ –º–∞–≥–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
     * @returns {{wizard: Wizard, index: number} | null} - –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ü–µ–ª—å –∏ –µ—ë –∏–Ω–¥–µ–∫—Å, –∏–ª–∏ null
     */
    function findTarget5v5(attacker, attackerIndex, opponentWizards) {
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–ª—å - –Ω–∞–ø—Ä–æ—Ç–∏–≤
        let targetIndex = attackerIndex;

        // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º 5 –ø–æ–∑–∏—Ü–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–ø—Ä–æ—Ç–∏–≤
        for (let i = 0; i < 5; i++) {
            // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–¥–µ–º –≤–ª–µ–≤–æ: 0, 4, 3, 2, 1)
            let checkIndex;
            if (i === 0) {
                checkIndex = targetIndex; // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤
            } else {
                // –ó–∞—Ç–µ–º –≤–ª–µ–≤–æ: (0-1+5)%5=4, (4-1+5)%5=3 –∏ —Ç.–¥.
                targetIndex = (targetIndex - 1 + 5) % 5;
                checkIndex = targetIndex;
            }

            const potentialTarget = opponentWizards[checkIndex];
            if (potentialTarget && potentialTarget.hp > 0) {
                return { wizard: potentialTarget, index: checkIndex };
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –º–∞–≥–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –º–µ—Ä—Ç–≤—ã
        return null;
    }

    /**
     * –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –±–æ—è –≤ –∫–æ–Ω—Å–æ–ª—å
     * @param {BattleState} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
     */
    function printBattlefield(state) {
        const { playerA, playerB } = state;

        console.log("\n--- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –±–æ—è ---");

        // –õ–∏–Ω–∏—è –º–∞–≥–æ–≤ –ò–≥—Ä–æ–∫–∞ A
        let lineA = "A: ";
        for (let i = 0; i < 5; i++) {
            const wizard = playerA.wizards[i];
            const status = wizard.hp > 0 ? `[${wizard.name}]` : `[üíÄ${wizard.name}]`;
            lineA += status.padEnd(8, ' '); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É —è—á–µ–π–∫–∏
        }
        console.log(lineA);

        // –õ–∏–Ω–∏—è –º–∞–≥–æ–≤ –ò–≥—Ä–æ–∫–∞ B
        let lineB = "B: ";
        for (let i = 0; i < 5; i++) {
            const wizard = playerB.wizards[i];
            const status = wizard.hp > 0 ? `[${wizard.name}]` : `[üíÄ${wizard.name}]`;
            lineB += status.padEnd(8, ' ');
        }
        console.log(lineB);

        console.log("--------------------------\n");
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É —Ñ–∞–∑—É –±–æ—è 5 –Ω–∞ 5
     * @param {BattleState} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
     * @returns {BattleState} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
     */
    function executePhase5v5(state) {
        const { playerA, playerB, currentPhase } = state;
        let attacker, defender, attackerWizards, defenderWizards;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ
        if (currentPhase === 1) {
            // –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∞—Ç–∞–∫—É–µ—Ç 1 –º–∞–≥–æ–º
            attacker = playerA;
            defender = playerB;
            attackerWizards = attacker.wizards.filter(w => w.hp > 0);
            defenderWizards = defender.wizards; // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏
            if (attackerWizards.length > 0) {
                const attackingWizard = attackerWizards[0]; // –ü–µ—Ä–≤—ã–π –∂–∏–≤–æ–π –º–∞–≥
                const attackerIndex = attacker.wizards.findIndex(w => w.id === attackingWizard.id);
                const targetInfo = findTarget5v5(attackingWizard, attackerIndex, defenderWizards);

                if (targetInfo) {
                    targetInfo.wizard.hp -= attackingWizard.damage;
                    state.log.push(`${attacker.name}'s ${attackingWizard.name} –∞—Ç–∞–∫—É–µ—Ç ${defender.name}'s ${targetInfo.wizard.name} –Ω–∞ ${attackingWizard.damage} —É—Ä–æ–Ω–∞. (${targetInfo.wizard.name} HP: ${Math.max(targetInfo.wizard.hp, 0)})`);
                    if (targetInfo.wizard.hp <= 0) {
                        state.log.push(`${defender.name}'s ${targetInfo.wizard.name} –ø–æ–≥–∏–±–∞–µ—Ç!`);
                    }
                } else {
                    state.log.push(`${attacker.name}'s ${attackingWizard.name} –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏.`);
                }
            } else {
                state.log.push(`${attacker.name} –Ω–µ –∏–º–µ–µ—Ç –∂–∏–≤—ã—Ö –º–∞–≥–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏ –≤ –§–∞–∑–µ 1.`);
            }
        } else {
            // –§–∞–∑—ã 2, 4, 6: –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç 2 –º–∞–≥–∞–º–∏
            // –§–∞–∑—ã 3, 5: –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∞—Ç–∞–∫—É–µ—Ç 2 –º–∞–≥–∞–º–∏
            const isOpponentPhase = (currentPhase === 2 || currentPhase === 4 || currentPhase === 6);
            if (isOpponentPhase) {
                attacker = playerB;
                defender = playerA;
            } else {
                attacker = playerA;
                defender = playerB;
            }

            attackerWizards = attacker.wizards.filter(w => w.hp > 0);
            defenderWizards = defender.wizards; // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–≤–∞ –º–∞–≥–∞ –∞—Ç–∞–∫—É—é—Ç (–ø–æ –ø–æ—Ä—è–¥–∫—É)
            let attackOrderIndex;
            switch (currentPhase) {
                case 2: attackOrderIndex = 0; break; // B1, B2
                case 3: attackOrderIndex = 2; break; // A2, A3
                case 4: attackOrderIndex = 4; break; // B3, B4
                case 5: attackOrderIndex = 6; break; // A4, A5
                case 6: attackOrderIndex = 8; break; // B5, B1 (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
                default: attackOrderIndex = 0;
            }

            let attackers = [];
            // –ë–µ—Ä–µ–º –º–∞–≥–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É, —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏
            for (let i = 0; i < 2; i++) {
                const wizardIndex = (attackOrderIndex + i) % attackerWizards.length;
                if (attackerWizards[wizardIndex]) {
                    attackers.push(attackerWizards[wizardIndex]);
                }
            }

            // –ê—Ç–∞–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –¥–≤—É—Ö –º–∞–≥–æ–≤
            for (let i = 0; i < attackers.length; i++) {
                const attackingWizard = attackers[i];
                const attackerIndex = attacker.wizards.findIndex(w => w.id === attackingWizard.id);
                const targetInfo = findTarget5v5(attackingWizard, attackerIndex, defenderWizards);

                if (targetInfo) {
                    targetInfo.wizard.hp -= attackingWizard.damage;
                    state.log.push(`${attacker.name}'s ${attackingWizard.name} –∞—Ç–∞–∫—É–µ—Ç ${defender.name}'s ${targetInfo.wizard.name} –Ω–∞ ${attackingWizard.damage} —É—Ä–æ–Ω–∞. (${targetInfo.wizard.name} HP: ${Math.max(targetInfo.wizard.hp, 0)})`);
                    if (targetInfo.wizard.hp <= 0) {
                        state.log.push(`${defender.name}'s ${targetInfo.wizard.name} –ø–æ–≥–∏–±–∞–µ—Ç!`);
                    }
                } else {
                    state.log.push(`${attacker.name}'s ${attackingWizard.name} –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏.`);
                }
            }
            if (attackers.length === 0) {
                const phaseNames = {2: "2", 3: "3", 4: "4", 5: "5", 6: "6"};
                state.log.push(`${attacker.name} –Ω–µ –∏–º–µ–µ—Ç –∂–∏–≤—ã—Ö –º–∞–≥–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏ –≤ –§–∞–∑–µ ${phaseNames[currentPhase]}.`);
            }
        }

        // –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        printBattlefield(state); // –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã

        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –∏–ª–∏ —Ä–∞—É–Ω–¥—É
        state.currentPhase++;
        if (state.currentPhase > 6) {
            state.currentPhase = 1;
            state.currentRound++;
            state.log.push(`--- –ö–æ–Ω–µ—Ü –†–∞—É–Ω–¥–∞ ${state.currentRound - 1} ---`);
        }

        return state;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω –ª–∏ –±–æ–π
     * @param {BattleState} state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
     * @returns {{isOver: boolean, winner: Player | null}} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    function isBattleOver5v5(state) {
        const aAlive = state.playerA.wizards.some(w => w.hp > 0);
        const bAlive = state.playerB.wizards.some(w => w.hp > 0);

        if (!aAlive) {
            return { isOver: true, winner: state.playerB };
        }
        if (!bAlive) {
            return { isOver: true, winner: state.playerA };
        }
        return { isOver: false, winner: null };
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –±–æ—è 5 –Ω–∞ 5 –¥–æ –∫–æ–Ω—Ü–∞
     * @param {Player} initiator - –ò–≥—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –±–æ–π
     * @param {Player} opponent - –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è –∏ –ª–æ–≥
     */
    function runBattle5v5(initiator, opponent) {
        let state = initializeBattle5v5(initiator, opponent);
        let result = isBattleOver5v5(state);

        console.log("=== –ù–ê–ß–ê–õ–û –ë–û–Ø ===");
        printBattlefield(state); // –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        while (!result.isOver) {
            state = executePhase5v5(state);
            result = isBattleOver5v5(state);
        }

        state.log.push(`--- –ë–æ–π –æ–∫–æ–Ω—á–µ–Ω! ---`);
        if (result.winner) {
            state.log.push(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${result.winner.name}!`);
        } else {
            state.log.push(`–ù–∏—á—å—è! –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ—Ö –º–∞–≥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.`);
        }

        return {
            winner: result.winner,
            log: state.log,
            finalState: state
        };
    }

    // --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞–≥–∞
    function createStandardWizard(id, name) {
        return {
            id: id,
            name: name,
            hp: 100,
            maxHp: 100,
            damage: 20,
            spell: "–ò—Å–∫—Ä–∞"
        };
    }

    // –°–æ–∑–¥–∞–µ–º –º–∞–≥–æ–≤ –¥–ª—è –ò–≥—Ä–æ–∫–∞ A
    const playerAWizards = [
        createStandardWizard("A1", "–ú–∞–≥ A1"),
        createStandardWizard("A2", "–ú–∞–≥ A2"),
        createStandardWizard("A3", "–ú–∞–≥ A3"),
        createStandardWizard("A4", "–ú–∞–≥ A4"),
        createStandardWizard("A5", "–ú–∞–≥ A5")
    ];

    // –°–æ–∑–¥–∞–µ–º –º–∞–≥–æ–≤ –¥–ª—è –ò–≥—Ä–æ–∫–∞ B
    const playerBWizards = [
        createStandardWizard("B1", "–ú–∞–≥ B1"),
        createStandardWizard("B2", "–ú–∞–≥ B2"),
        createStandardWizard("B3", "–ú–∞–≥ B3"),
        createStandardWizard("B4", "–ú–∞–≥ B4"),
        createStandardWizard("B5", "–ú–∞–≥ B5")
    ];

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    const playerA = {
        id: "playerA",
        name: "–ò–≥—Ä–æ–∫ A",
        wizards: playerAWizards
    };

    const playerB = {
        id: "playerB",
        name: "–ò–≥—Ä–æ–∫ B",
        wizards: playerBWizards
    };


    /**
     * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ BattleSim5v5.runSingleTest();
     */
    function runSingleTest() {
        console.log("=== –°–∏–º—É–ª—è—Ü–∏—è –±–æ—è: –ò–≥—Ä–æ–∫ A (5 –º–∞–≥–æ–≤) –ø—Ä–æ—Ç–∏–≤ –ò–≥—Ä–æ–∫ B (5 –º–∞–≥–æ–≤) ===");
        console.log("–í—Å–µ –º–∞–≥–∏ –∏–º–µ—é—Ç 100 HP –∏ –Ω–∞–Ω–æ—Å—è—Ç 20 —É—Ä–æ–Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º '–ò—Å–∫—Ä–∞'.\n");

        const battleResult = runBattle5v5(playerA, playerB);

        // –í—ã–≤–æ–¥–∏–º –ª–æ–≥
        battleResult.log.forEach(entry => console.log(entry));

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log("\n" + "=".repeat(50));
        if (battleResult.winner) {
            console.log(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${battleResult.winner.name}`);
        } else {
            console.log(`ü§ù –ù–∏—á—å—è`);
        }
        console.log("=".repeat(50) + "\n");

        return battleResult.winner ? battleResult.winner.name : "–ù–∏—á—å—è";
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ BattleSim5v5.runMultipleTests(N);
     */
    function runMultipleTests(numTests = 100) {
        console.log(`=== –ó–∞–ø—É—Å–∫ ${numTests} —Å–∏–º—É–ª—è—Ü–∏–π –±–æ—è ===`);
        let winsA = 0;
        let winsB = 0;
        let draws = 0;

        for (let i = 0; i < numTests; i++) {
            // –ú–µ–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —á–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            let initiator, opponent;
            if (i % 2 === 0) {
                initiator = playerA;
                opponent = playerB;
            } else {
                initiator = playerB;
                opponent = playerA;
            }

            const result = runBattle5v5(initiator, opponent);
            if (result.winner) {
                if (result.winner.id === "playerA") {
                    winsA++;
                } else {
                    winsB++;
                }
            } else {
                draws++;
            }
        }

        console.log("\n" + "=".repeat(50));
        console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:");
        console.log(`–ò–≥—Ä–æ–∫ A –ø–æ–±–µ–¥–∏–ª: ${winsA} —Ä–∞–∑ (${(winsA / numTests * 100).toFixed(2)}%)`);
        console.log(`–ò–≥—Ä–æ–∫ B –ø–æ–±–µ–¥–∏–ª: ${winsB} —Ä–∞–∑ (${(winsB / numTests * 100).toFixed(2)}%)`);
        console.log(`–ù–∏—á—å–∏: ${draws} —Ä–∞–∑ (${(draws / numTests * 100).toFixed(2)}%)`);
        console.log("=".repeat(50) + "\n");
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
    global.BattleSim5v5 = {
        runSingleTest: runSingleTest,
        runMultipleTests: runMultipleTests
    };

    console.log("‚úÖ –ú–æ–¥—É–ª—å BattleSim5v5 –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

})(window); // –ü–µ—Ä–µ–¥–∞–µ–º 'window' –∫–∞–∫ 'global'