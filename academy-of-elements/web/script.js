// web/script.js
console.log('‚úÖ script.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ —Å–∫—Ä–∏–ø—Ç—ã Firebase
if (typeof firebase === 'undefined') {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Firebase');
    document.addEventListener('DOMContentLoaded', function() {
        const factionElement = document.getElementById('faction');
        if (factionElement) {
            factionElement.textContent = '–û—à–∏–±–∫–∞ Firebase';
        }
    });
    throw new Error('Firebase not loaded');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAHl5EUnVHlIJLqsi_wfT14PkE-NClMtMU",
  authDomain: "academy-of-elements.firebaseapp.com",
  databaseURL: "https://academy-of-elements-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "academy-of-elements",
  storageBucket: "academy-of-elements.firebasestorage.app",
  messagingSenderId: "182622266003",
  appId: "1:182622266003:web:4e9836cffe58eb472c6366",
  measurementId: "G-5V7LG83DS3"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let database;
try {
    firebase.initializeApp(firebaseConfig);
    database = firebase.database();
    console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    document.addEventListener('DOMContentLoaded', function() {
        const factionElement = document.getElementById('faction');
        if (factionElement) {
            factionElement.textContent = '–û—à–∏–±–∫–∞ –ë–î';
        }
    });
    throw error;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ user_id —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const urlParams = new URLSearchParams(window.location.search);
const userId = urlParams.get('user_id');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userData = null;
let buildingsConfig = {};
let currentModal = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–¥–∞–Ω–∏–π
function getBuildingsConfig() {
    return {
        "library": {
            "name": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
            "emoji": "üìö",
            "image_url": "/images/library.png",
            "description": "–¶–µ–Ω—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
            "can_build": false
        },
        "wizard_tower": {
            "name": "–ë–∞—à–Ω—è –º–∞–≥–æ–≤",
            "emoji": "üßô‚Äç‚ôÇÔ∏è",
            "image_url": "/images/wizard_tower.png",
            "description": "–£—Å–∏–ª–∏–≤–∞–µ—Ç –º–∞–≥–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã—Ö.",
            "can_build": false
        },
        "blessing_tower": {
            "name": "–ë–∞—à–Ω—è –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π",
            "emoji": "üõê",
            "image_url": "/images/blessing_tower.png",
            "description": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ—â–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è –¥–ª—è –º–∞–≥–æ–≤.",
            "can_build": true
        },
        "aom_generator": {
            "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ê–û–ú",
            "emoji": "üíé",
            "image_url": "/images/aom_generator.png",
            "description": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª—ã AOM - –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É.",
            "can_build": true
        },
        "pvp_arena": {
            "name": "PvP –ê—Ä–µ–Ω–∞",
            "emoji": "‚öîÔ∏è",
            "image_url": "/images/pvp_arena.png",
            "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ–µ–≤ 1 –Ω–∞ 1 –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É autochess —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.",
            "can_build": true
        },
        "defense_tower": {
            "name": "–ë–∞—à–Ω—è –∑–∞—â–∏—Ç—ã",
            "emoji": "üõ°Ô∏è",
            "image_url": "/images/defense_tower.png",
            "description": "–ó–∞—â–∏—â–∞–µ—Ç –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.",
            "can_build": true
        },
        "arcane_lab": {
            "name": "–ê—Ä–∫–∞–Ω—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
            "emoji": "‚öóÔ∏è",
            "image_url": "/images/arcane_lab.png",
            "description": "–£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
            "can_build": true
        }
    };
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadUserData() {
    if (!userId) {
        console.error('User ID not found');
        updateUIWithError('–ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    try {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase...');
        const snapshot = await database.ref(`users/${userId}`).once('value');
        const data = snapshot.val();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase:', data);

        if (data) {
            userData = data; // <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            buildingsConfig = getBuildingsConfig(); // <-- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            updateUI(); // <-- –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        } else {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            updateUIWithError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        updateUIWithError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Å –æ—à–∏–±–∫–æ–π
function updateUIWithError(errorMessage) {
    const factionElement = document.getElementById('faction');
    if (factionElement) {
        factionElement.textContent = errorMessage;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    console.log("updateUI called");
    if (!userData) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
    const factionElement = document.getElementById('faction');
    console.log("factionElement:", factionElement);
    if (factionElement) {
        factionElement.textContent = userData.faction || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        console.log("faction updated to:", userData.faction);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –∑–¥–∞–Ω–∏–π
    updateBuildingsGrid();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∑–¥–∞–Ω–∏–π (3x3)
function updateBuildingsGrid() {
    const grid = document.getElementById('city-grid');
    if (!grid) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç city-grid –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è 3x3 —Å–µ—Ç–∫–∏
    grid.className = 'grid grid-3x3';
    grid.innerHTML = '';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 9 —è—á–µ–µ–∫ –¥–ª—è 3x3 —Å–µ—Ç–∫–∏
    const buildingsGrid = userData.buildings_grid || Array(9).fill(null);

    for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.dataset.index = i;

        const buildingId = buildingsGrid[i];
        const construction = userData.construction || {};

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç—Ä–æ–∏—Ç—Å—è –ª–∏ —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
        const isUnderConstruction = construction.active &&
            construction.cell_index != null &&
            parseInt(construction.cell_index) === i &&
            construction.type === 'build';

        if (buildingId) {
            // –í —è—á–µ–π–∫–µ –µ—Å—Ç—å –∑–¥–∞–Ω–∏–µ
            cell.classList.add('built');

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const buildingConfig = buildingsConfig[buildingId];
            const buildingInfo = userData.buildings[buildingId];

            if (buildingConfig) {
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç img
                const img = document.createElement('img');
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º image_url, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ fallback –Ω–∞ —ç–º–æ–¥–∑–∏
                img.src = buildingConfig.image_url || 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg"/>';
                img.alt = buildingConfig.name;
                img.title = `${buildingConfig.name} (—É—Ä–æ–≤–µ–Ω—å ${buildingInfo?.level || 1})`;
                img.className = 'building-image';
                img.onerror = function() {
                    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
                    cell.removeChild(img);
                    cell.textContent = buildingConfig.emoji || 'üèõÔ∏è';
                };

                cell.appendChild(img);

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ ID –∑–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                cell.classList.add(`building-${buildingId}`);
            } else {
                cell.textContent = 'üèõÔ∏è';
                cell.title = `–ó–¥–∞–Ω–∏–µ (${buildingId})`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–¥–∞–Ω–∏—è
            cell.addEventListener('click', () => onBuildingClick(cell, buildingId, i));
        } else if (isUnderConstruction) {
            // –í —è—á–µ–π–∫–µ –∏–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∞
            cell.classList.add('under-construction');
            cell.textContent = 'üî®';
            cell.title = '–ò–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∞...';
            cell.classList.add('pulse');
        } else {
            // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            cell.classList.add('empty');
            cell.textContent = '+';
            cell.title = '–ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞. –ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å.';

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏
            cell.addEventListener('click', () => onEmptyCellClick(cell, i));
        }

        grid.appendChild(cell);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function onBuildingClick(cell, buildingId, cellIndex) {
    console.log(`üè¢ –ö–ª–∏–∫ –ø–æ –∑–¥–∞–Ω–∏—é: ${buildingId} –≤ —è—á–µ–π–∫–µ ${cellIndex}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏
    const buildingConfig = buildingsConfig[buildingId];
    const buildingInfo = userData.buildings[buildingId];

    if (!buildingConfig) {
        alert(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ: ${buildingId}`);
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let infoText = `üèõÔ∏è **${buildingConfig.name}**\n`;
    infoText += `üìù ${buildingConfig.description}\n`;
    infoText += `üìä –£—Ä–æ–≤–µ–Ω—å: ${buildingInfo?.level || 1}\n\n`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ
    const maxLevel = getBuildingMaxLevel(buildingId);
    const currentLevel = buildingInfo?.level || 1;

    if (currentLevel < maxLevel) {
        infoText += `‚¨ÜÔ∏è –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–æ —É—Ä–æ–≤–Ω—è ${currentLevel + 1}\n`;
        infoText += `–ö–æ–º–∞–Ω–¥–∞ –≤ –±–æ—Ç–µ: \`/upgrade ${buildingId} ${currentLevel + 1}\``;
    } else {
        infoText += `‚úÖ –ó–¥–∞–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ (${maxLevel})`;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    alert(infoText.replace(/\`/g, ''));
}

function onEmptyCellClick(cell, cellIndex) {
    console.log(`‚ûï –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–µ: ${cellIndex}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏–π
    const buildableBuildings = Object.entries(buildingsConfig).filter(
        ([id, data]) => data.can_build !== false
    );

    if (buildableBuildings.length === 0) {
        alert("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏.");
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    let modalContent = `
        <div style="padding: 15px; max-width: 300px; background: #2c2c3d; border-radius: 10px; color: white;">
            <h3 style="margin-top: 0; color: #7289da;">üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ —è—á–µ–π–∫–µ ${cellIndex}</h3>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ:</p>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
    buildableBuildings.forEach(([id, data], index) => {
        modalContent += `
            <button style="margin: 5px 0; padding: 10px 15px; font-size: 14px; width: 100%; border: none; border-radius: 6px; background: #7289da; color: white; cursor: pointer; transition: background 0.2s;"
                onclick="selectBuildingToBuild('${id}', ${cellIndex})">
                ${data.emoji} ${data.name}
            </button>
        `;
    });
    
    modalContent += `
        <button style="margin: 10px 0 0 0; padding: 8px 15px; font-size: 12px; width: 100%; border: 1px solid #7289da; border-radius: 6px; background: transparent; color: #7289da; cursor: pointer;"
            onclick="closeCurrentModal()">
            –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    `;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.innerHTML = modalContent;
    modal.style.position = 'fixed';
    modal.style.top = '50%';
    modal.style.left = '50%';
    modal.style.transform = 'translate(-50%, -50%)';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    modal.style.padding = '20px';
    modal.style.borderRadius = '12px';
    modal.style.zIndex = '1000';
    modal.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.5)';
    
    // –î–æ–±–∞–≤–ª—è–µ–º overlay
    const overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    overlay.style.zIndex = '999';
    overlay.onclick = closeCurrentModal;
    
    document.body.appendChild(overlay);
    document.body.appendChild(modal);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    currentModal = { modal, overlay };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏—è
function selectBuildingToBuild(buildingId, cellIndex) {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ—Å—Ç—Ä–æ–π–∫—É ${buildingId} –≤ —è—á–µ–π–∫–µ ${cellIndex}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeCurrentModal();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è userId
    if (!userId) {
        alert('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
    fetch('/api/build', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            user_id: userId,
            building_id: buildingId,
            cell_index: cellIndex
        })
    })
    .then(response => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            return response.json();
        } else {
            // –ï—Å–ª–∏ –Ω–µ JSON, —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return response.text().then(text => {
                console.error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', text);
                throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + text.substring(0, 200));
            });
        }
    })
    .then(data => {
        if (data.success) {
            // –£—Å–ø–µ—à–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            alert(`‚úÖ ${data.message}`);
            loadUserData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        } else {
            // –û—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert(`‚ùå ${data.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–µ –∑–¥–∞–Ω–∏—è'}`);
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–µ:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–µ –∑–¥–∞–Ω–∏—è: ${error.message}`);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeCurrentModal() {
    if (currentModal) {
        if (currentModal.overlay && document.body.contains(currentModal.overlay)) {
            document.body.removeChild(currentModal.overlay);
        }
        if (currentModal.modal && document.body.contains(currentModal.modal)) {
            document.body.removeChild(currentModal.modal);
        }
        currentModal = null;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getBuildingMaxLevel(buildingId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–æ –∏–∑ buildings_config
    const maxLevels = {
        "library": 1,
        "wizard_tower": 10,
        "blessing_tower": 5,
        "aom_generator": 20,
        "pvp_arena": 1,
        "defense_tower": 5,
        "arcane_lab": 15
    };
    return maxLevels[buildingId] || 1;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function onFactionButtonClick() {
    console.log("–ö–Ω–æ–ø–∫–∞ '–í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏' –Ω–∞–∂–∞—Ç–∞");
    if (!userData) {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–º–µ–Ω—ã
    const currentFaction = userData.faction || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const factionNames = {
        "fire": "üî• –û–≥–æ–Ω—å",
        "water": "üíß –í–æ–¥–∞", 
        "wind": "üå™Ô∏è –í–µ—Ç–µ—Ä",
        "earth": "üåø –ó–µ–º–ª—è"
    };
    const factionDisplay = factionNames[currentFaction] || currentFaction;
    
    alert(
        `üßô‚Äç‚ôÇÔ∏è –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: ${factionDisplay}\n\n` +
        `–î–ª—è —Å–º–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç–µ:\n` +
        `üî• /fire - –û–≥–æ–Ω—å\n` +
        `üíß /water - –í–æ–¥–∞\n` +
        `üå™Ô∏è /wind - –í–µ—Ç–µ—Ä\n` +
        `üåø /earth - –ó–µ–º–ª—è`
    );
}

function onProfileButtonClick() {
    console.log("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ—Ñ–∏–ª—å' –Ω–∞–∂–∞—Ç–∞");
    if (!userData) {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ Telegram
    alert(
        `üìñ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ Telegram –±–æ—Ç–µ:\n\n` +
        `/profile`
    );
}

function onCityButtonClick() {
    console.log("–ö–Ω–æ–ø–∫–∞ '–ì–æ—Ä–æ–¥' –Ω–∞–∂–∞—Ç–∞");
    if (!userData) {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    loadUserData();
    alert('üè∞ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!');
}

function onUpgradeButtonClick() {
    console.log("–ö–Ω–æ–ø–∫–∞ '–£–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ' –Ω–∞–∂–∞—Ç–∞");
    if (!userData) {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }

    const userBuildings = userData.buildings || {};
    const buildingsList = Object.entries(userBuildings);

    if (buildingsList.length === 0) {
        alert("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.");
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏—è
    let modalContent = `
      <div style="padding: 15px; max-width: 300px; background: #2c2c3d; border-radius: 10px; color: white;">
        <h3 style="margin-top: 0; color: #7289da;">‚¨ÜÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è</h3>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ:</p>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
    buildingsList.forEach(([id, data], index) => {
        const buildingConfig = buildingsConfig[id];
        const name = buildingConfig ? buildingConfig.name : id;
        const currentLevel = data.level || 1;
        const emoji = buildingConfig?.emoji || 'üèõÔ∏è';
        
        modalContent += `
          <button style="margin: 5px 0; padding: 10px 15px; font-size: 14px; width: 100%; border: none; border-radius: 6px; background: #7289da; color: white; cursor: pointer; transition: background 0.2s;"
              onclick="selectBuildingToUpgrade('${id}', ${currentLevel})">
            ${emoji} ${name} (—É—Ä–æ–≤–µ–Ω—å ${currentLevel})
          </button>
        `;
    });
    
    modalContent += `
        <button style="margin: 10px 0 0 0; padding: 8px 15px; font-size: 12px; width: 100%; border: 1px solid #7289da; border-radius: 6px; background: transparent; color: #7289da; cursor: pointer;"
            onclick="closeCurrentModal()">
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    `;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.innerHTML = modalContent;
    modal.style.position = 'fixed';
    modal.style.top = '50%';
    modal.style.left = '50%';
    modal.style.transform = 'translate(-50%, -50%)';
    modal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    modal.style.padding = '20px';
    modal.style.borderRadius = '12px';
    modal.style.zIndex = '1000';
    modal.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.5)';
    
    // –î–æ–±–∞–≤–ª—è–µ–º overlay
    const overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    overlay.style.zIndex = '999';
    overlay.onclick = closeCurrentModal;
    
    document.body.appendChild(overlay);
    document.body.appendChild(modal);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    currentModal = { modal, overlay };
}

function onHireWizardButtonClick() {
    console.log("–ö–Ω–æ–ø–∫–∞ '–ù–∞–Ω—è—Ç—å –º–∞–≥–∞' –Ω–∞–∂–∞—Ç–∞");
    if (!userData) {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }

    const commandText = `/hire_wizard`;
    alert(
        `–î–ª—è –Ω–∞–π–º–∞ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ Telegram –±–æ—Ç–µ:\n\n${commandText}`
    );
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function () {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å userId
    if (userId) {
        loadUserData();
    } else {
        updateUIWithError('–û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const upgradeBtn = document.getElementById('upgrade-btn');
    const hireWizardBtn = document.getElementById('hire-wizard-btn');
    const factionBtn = document.getElementById('faction-btn');
    const profileBtn = document.getElementById('profile-btn');
    const cityBtn = document.getElementById('city-btn');

    if (upgradeBtn) {
        upgradeBtn.addEventListener('click', onUpgradeButtonClick);
    }

    if (hireWizardBtn) {
        hireWizardBtn.addEventListener('click', onHireWizardButtonClick);
    }
    
    if (factionBtn) {
        factionBtn.addEventListener('click', onFactionButtonClick);
    }

    if (profileBtn) {
        profileBtn.addEventListener('click', onProfileButtonClick);
    }

    if (cityBtn) {
        cityBtn.addEventListener('click', onCityButtonClick);
    }
});