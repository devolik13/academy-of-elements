# handlers/building_handlers.py
from aiogram import types
from database import UserDatabase
from building_manager import BuildingManager
from buildings_config import BUILDINGS_DATA

async def cmd_buildings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–∞"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        buildings = user_data.get("buildings", {})
        construction = user_data.get("construction", {})
        
        if not buildings:
            await message.answer("üèóÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π.")
            return

        response_text = "üèóÔ∏è **–¢–≤–æ–∏ –∑–¥–∞–Ω–∏—è:**\n\n"
        
        for building_id, building_info in buildings.items():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–∞–Ω–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            building_data = BUILDINGS_DATA.get(building_id, {})
            building_name = building_data.get("name", building_id)
            building_emoji = building_data.get("emoji", "üèõÔ∏è")
            building_level = building_info.get("level", 1)
            
            response_text += f"{building_emoji} **{building_name}** (—É—Ä–æ–≤–µ–Ω—å {building_level})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            effects = building_data.get("effects", {})
            if effects:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è –∏ –µ–≥–æ —É—Ä–æ–≤–Ω—è
                pass
                 
            response_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç—Ä–æ–π–∫–µ
        if construction.get("active", False):
            building_id = construction.get("building_id")
            target_level = construction.get("target_level")
            time_left = construction.get("time_left", 0)
            construction_type = construction.get("type", "build")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ"
            building_data = BUILDINGS_DATA.get(building_id)
            if building_data:
                building_name = building_data.get("name", building_id)
                building_emoji = building_data.get("emoji", "üèõÔ∏è")
            
            type_text = "–ø–æ—Å—Ç—Ä–æ–π–∫–∞" if construction_type == "build" else "—É–ª—É—á—à–µ–Ω–∏–µ"
            target_text = f"–¥–æ —É—Ä–æ–≤–Ω—è {target_level}" if construction_type == "upgrade" else ""
            
            response_text += f"‚è≥ **–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ—Å—Ç—Ä–æ–π–∫–∞:**\n"
            response_text += f"{building_emoji} {building_name} ({type_text} {target_text}, {time_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)\n"
        else:
            response_text += "‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫\n"

        await message.answer(response_text, parse_mode="Markdown")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /buildings: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏—è—Ö.")

async def cmd_build(message: types.Message):
    """–ù–∞—á–∞—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫—É –∑–¥–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ Telegram."""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        args = message.text.split()[1:]
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–¥–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏.\n"
                "–ü—Ä–∏–º–µ—Ä: `/build aom_generator 10` (–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ —è—á–µ–π–∫–µ 10)\n"
                "–ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è.",
                parse_mode="Markdown"
            )
            return

        building_id = args[0]
        cell_index = None
        if len(args) > 1:
             try:
                 cell_index = int(args[1])
             except ValueError:
                 await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                 return

        building_data = BUILDINGS_DATA.get(building_id)
        if not building_data:
            await message.answer(f"‚ùå –ó–¥–∞–Ω–∏–µ —Å ID '{building_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        if not building_data.get("can_build", False):
            await message.answer(f"‚ùå –ó–¥–∞–Ω–∏–µ '{building_data['name']}' –Ω–µ–ª—å–∑—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å.")
            return

        # –ï—Å–ª–∏ cell_index –Ω–µ –∑–∞–¥–∞–Ω, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ
        if cell_index is None:
            buildings_grid = user_data.get("buildings_grid", [None] * 9)
            try:
                cell_index = buildings_grid.index(None) # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π None
            except ValueError:
                await message.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏.")
                return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ BuildingManager
        success, msg = await BuildingManager.start_construction(user_id, building_id, cell_index)
        await message.answer(msg)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /build: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏.")

async def cmd_upgrade(message: types.Message):
    """–ù–∞—á–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º "/upgrade"
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–¥–∞–Ω–∏—è –∏ —Ü–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å.\n"
                "–ü—Ä–∏–º–µ—Ä: `/upgrade aom_generator 2`",
                parse_mode="Markdown"
            )
            return

        building_id = args[0]
        try:
            target_level = int(args[1])
        except ValueError:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ
        building_data = BUILDINGS_DATA.get(building_id)
        if not building_data:
            await message.answer(f"‚ùå –ó–¥–∞–Ω–∏–µ —Å ID '{building_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BuildingManager
        success, msg = await BuildingManager.start_upgrade(user_id, building_id, target_level)
        await message.answer(msg)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /upgrade: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–ª—É—á—à–µ–Ω–∏—è.")