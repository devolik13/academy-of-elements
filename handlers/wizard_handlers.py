# handlers/wizard_handlers.py
from aiogram import types
from database import UserDatabase
from buildings_config import BUILDINGS_DATA

async def cmd_profile(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
             await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
             return

        faction = user_data.get("faction", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        emojis = {"fire": "üî•", "water": "üíß", "wind": "üå™Ô∏è", "earth": "üåø"}
        emoji = emojis.get(faction, "üßô‚Äç‚ôÇÔ∏è")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = user_data.get("created_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if isinstance(created_at, dict) and ".sv" in created_at:
            created_date = "–¢–æ–ª—å–∫–æ —á—Ç–æ"
        elif created_at:
            # –ï—Å–ª–∏ —ç—Ç–æ timestamp, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            from datetime import datetime
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                dt = datetime.fromtimestamp(created_at / 1000)
                created_date = dt.strftime("%Y-%m-%d")
            except:
                created_date = str(created_at)[:10]
        else:
            created_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞—Ö
        wizards_info = "\nüßô‚Äç‚ôÇÔ∏è **–ú–∞–≥–∏:**\n"
        wizards = user_data.get("wizards", [])
        if wizards:
            for wizard in wizards:
                wizard_name = wizard.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π")
                wizard_faction = wizard.get("faction", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                wizard_spells_ids = wizard.get("spells", [])
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
                spell_names = []
                available_spells = user_data.get("spells", {}).get(wizard_faction, {})
                for spell_id in wizard_spells_ids:
                    spell_info = available_spells.get(spell_id, {})
                    spell_name = spell_info.get("name", spell_id)
                    spell_level = spell_info.get("level", 1)
                    spell_names.append(f"{spell_name} (—É—Ä. {spell_level})")
                
                wizards_info += f"  ‚Ä¢ {wizard_name} ({wizard_faction.title()}): {', '.join(spell_names) if spell_names else '–ù–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π'}\n"
        else:
            wizards_info += "  –ù–µ—Ç –º–∞–≥–æ–≤\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö
        research_info = "\nüî¨ **–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**\n"
        research = user_data.get("research", {})
        if research.get("active", False):
            spell_id = research.get("spell")
            target_level = research.get("target_level")
            time_left = research.get("time_left", 0)
            faction_bonus = research.get("faction_bonus", False)
            
            # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            spell_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ"
            spell_tier = 1
            for fact, spells_dict in user_data.get("spells", {}).items():
                if spell_id in spells_dict:
                    spell_info = spells_dict[spell_id]
                    spell_name = spell_info.get("name", spell_id)
                    spell_tier = spell_info.get("tier", 1)
                    break
            
            faction_text = "—Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏" if faction_bonus else "—á—É–∂–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏"
            research_info += f"  ‚Ä¢ {spell_name} (–°—Ç—É–ø–µ–Ω—å {spell_tier}) ‚Üí –£—Ä–æ–≤–µ–Ω—å {target_level} ({faction_text}, {time_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)\n"
        else:
            research_info += "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ
        construction_info = "\nüèóÔ∏è **–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ:**\n"
        construction = user_data.get("construction", {})
        if construction.get("active", False):
            building_id = construction.get("building_id")
            target_level = construction.get("target_level")
            time_left = construction.get("time_left", 0)
            construction_type = construction.get("type", "build")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
            building_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ"
            building_data = BUILDINGS_DATA.get(building_id)
            if building_data:
                building_name = building_data.get("name", building_id)
            
            type_text = "–ø–æ—Å—Ç—Ä–æ–π–∫–∞" if construction_type == "build" else "—É–ª—É—á—à–µ–Ω–∏–µ"
            target_text = f"–¥–æ —É—Ä–æ–≤–Ω—è {target_level}" if construction_type == "upgrade" else ""
            
            construction_info += f"  ‚Ä¢ {building_name} ({type_text} {target_text}, {time_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)\n"
        else:
            construction_info += "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–º–µ –º–∞–≥–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ—Ç —Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–∏)
        # hire_info = "\nüßô‚Äç‚ôÇÔ∏è **–ù–∞–π–º –º–∞–≥–æ–≤:**\n"
        # hire_info += "  –ò—Å–ø–æ–ª—å–∑—É–π /hire_wizard –¥–ª—è –Ω–∞–π–º–∞ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞.\n"
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–æ–≤
        wizards_count = len(wizards)
        wizards_summary = f"\nüßô‚Äç‚ôÇÔ∏è **–ú–∞–≥–∏:** {wizards_count}\n"

        await message.answer(
            f"{emoji} **–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞**\n\n"
            f"üîπ –§—Ä–∞–∫—Ü–∏—è: **{faction.title()}**\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_date}"
            f"{wizards_summary}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞—Ö
            f"{research_info}"
            f"{construction_info}",
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /profile: {e}")
        import traceback
        traceback.print_exc() # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

async def cmd_wizards(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–æ–≤ –∏–≥—Ä–æ–∫–∞"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        wizards = user_data.get("wizards", [])
        if not wizards:
            await message.answer("üßô‚Äç‚ôÇÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /hire_wizard, —á—Ç–æ–±—ã –Ω–∞–Ω—è—Ç—å!")
            return

        response_text = "üßô‚Äç‚ôÇÔ∏è **–¢–≤–æ–∏ –º–∞–≥–∏:**\n\n"
        for i, wizard in enumerate(wizards, 1):
            wizard_name = wizard.get("name", f"–ú–∞–≥ {i}")
            wizard_faction = wizard.get("faction", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").title()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –º–∞–≥–∞
            wizard_spells_ids = wizard.get("spells", [])
            spell_info_list = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö –∏–∑ userData
            all_spells = user_data.get("spells", {})
            for spell_id in wizard_spells_ids:
                # –ò—â–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏—è—Ö
                found_spell = None
                found_faction = None
                for faction_key, faction_spells in all_spells.items():
                    if spell_id in faction_spells:
                        found_spell = faction_spells[spell_id]
                        found_faction = faction_key
                        break
                
                if found_spell:
                    spell_name = found_spell.get("name", spell_id)
                    spell_level = found_spell.get("level", 1)
                    spell_tier = found_spell.get("tier", 1)
                    spell_info_list.append(f"{spell_name} (–°{spell_tier} –£{spell_level})")
                else:
                    spell_info_list.append(f"{spell_id} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)")
            
            spells_text = ", ".join(spell_info_list) if spell_info_list else "–ù–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"
            response_text += f"{i}. **{wizard_name}** ({wizard_faction})\n"
            response_text += f"   –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è: {spells_text}\n\n"

        await message.answer(response_text, parse_mode="Markdown")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /wizards: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–æ–≤.")

async def cmd_spells(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        all_spells = user_data.get("spells", {})
        available_spells = user_data.get("available_spells", [])
        
        if not any(all_spells.values()):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
            await message.answer("üìñ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.")
            return

        response_text = "üìñ **–¢–≤–æ–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:**\n\n"
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ—Ä–∞–∫—Ü–∏–π
        faction_names = {
            "fire": "üî• –û–≥–æ–Ω—å",
            "water": "üíß –í–æ–¥–∞", 
            "wind": "üå™Ô∏è –í–µ—Ç–µ—Ä",
            "earth": "üåø –ó–µ–º–ª—è"
        }
        
        for faction_key, faction_spells in all_spells.items():
            if faction_spells:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —É —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏
                faction_display = faction_names.get(faction_key, faction_key.title())
                response_text += f"**{faction_display}:**\n"
                
                for spell_id, spell_info in faction_spells.items():
                    spell_name = spell_info.get("name", spell_id)
                    spell_level = spell_info.get("level", 1)
                    spell_tier = spell_info.get("tier", 1)
                    availability = "‚úÖ" if spell_id in available_spells else "üîí"
                    
                    response_text += f"  {availability} {spell_name} (–°—Ç—É–ø–µ–Ω—å {spell_tier}, –£—Ä–æ–≤–µ–Ω—å {spell_level})\n"
                response_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö
        response_text += "‚úÖ - –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        response_text += "üîí - –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è\n"

        await message.answer(response_text, parse_mode="Markdown")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /spells: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.")

async def cmd_research(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        research = user_data.get("research", {})
        
        if research.get("active", False):
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            spell_id = research.get("spell")
            target_level = research.get("target_level")
            time_left = research.get("time_left", 0)
            faction_bonus = research.get("faction_bonus", False)
            
            # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            spell_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ"
            spell_tier = 1
            for fact, spells_dict in user_data.get("spells", {}).items():
                if spell_id in spells_dict:
                    spell_info = spells_dict[spell_id]
                    spell_name = spell_info.get("name", spell_id)
                    spell_tier = spell_info.get("tier", 1)
                    break
            
            faction_text = "—Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏" if faction_bonus else "—á—É–∂–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏"
            await message.answer(
                f"üî¨ **–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:**\n\n"
                f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: **{spell_name}** (–°—Ç—É–ø–µ–Ω—å {spell_tier})\n"
                f"–¶–µ–ª—å: –£—Ä–æ–≤–µ–Ω—å {target_level}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left} –¥–Ω–µ–π\n"
                f"–¢–∏–ø: {faction_text}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /cancel_research –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="Markdown"
            )
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
            await message.answer(
                f"üî¨ **–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π**\n\n"
                f"–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                f"‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏\n"
                f"‚Ä¢ –ò–∑—É—á–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`/research upgrade <spell_id>` - —É–ª—É—á—à–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ\n"
                f"`/research learn <faction> <spell_id>` - –∏–∑—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ\n"
                f"–ü—Ä–∏–º–µ—Ä: `/research upgrade spark`\n"
                f"–ü—Ä–∏–º–µ—Ä: `/research learn water icicle`",
                parse_mode="Markdown"
            )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /research: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏.")

async def cmd_cancel_research(message: types.Message):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        research = user_data.get("research", {})
        
        if not research.get("active", False):
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        await UserDatabase.update_research(user_id, {
            "active": False,
            "spell": None,
            "target_level": None,
            "time_left": 0,
            "faction_bonus": False
        })
        
        await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /cancel_research: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")

async def cmd_hire_wizard(message: types.Message):
    """–ù–∞–Ω—è—Ç—å –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)"""
    try:
        user_id = str(message.from_user.id)
        user_data = await UserDatabase.get_user(user_id)
        if not user_data:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–æ–≤
        wizards = user_data.get("wizards", [])
        wizards_count = len(wizards)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞
        new_wizard_id = f"wizard_{wizards_count + 1}"
        user_faction = user_data.get("faction", "fire")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏)
        initial_spell = None
        user_spells = user_data.get("spells", {}).get(user_faction, {})
        available_spells = user_data.get("available_spells", [])
        
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏
        for spell_id in user_spells:
            if spell_id in available_spells:
                initial_spell = spell_id
                break
        
        if not initial_spell and user_spells:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑—É—á–µ–Ω–Ω–æ–µ
            initial_spell = next(iter(user_spells), None)
        
        wizard_data = {
            "id": new_wizard_id,
            "name": f"–ú–∞–≥ {wizards_count + 1}",
            "faction": user_faction,
            "spells": [initial_spell] if initial_spell else []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞
        success = await UserDatabase.add_wizard(user_id, wizard_data)
        
        if success:
            await message.answer(
                f"‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω—è–ª –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞!\n"
                f"–ò–º—è: **{wizard_data['name']}**\n"
                f"–§—Ä–∞–∫—Ü–∏—è: {user_faction.title()}\n",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ –º–∞–≥–∞.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /hire_wizard: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ –º–∞–≥–∞.")
