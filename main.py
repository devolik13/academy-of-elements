import os
import asyncio
from contextlib import asynccontextmanager

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI ---
from fastapi import FastAPI
import uvicorn

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram ---
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.types import Update

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from dotenv import load_dotenv
from app import create_app

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://your-app.onrender.com{WEBHOOK_PATH}"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à URL

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
    await bot.delete_webhook()
    print("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI ---
app = create_app(dp, bot)

# --- –†–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook ---
@app.post(WEBHOOK_PATH)
async def handle_webhook(update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        telegram_update = Update(**update)
        await dp.feed_update(bot=bot, update=telegram_update)
        return {"status": "ok"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π FastAPI ---
@app.on_event("startup")
async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await set_webhook()

@app.on_event("shutdown")
async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await delete_webhook()

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)import os
from contextlib import asynccontextmanager

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è FastAPI ---
from fastapi import FastAPI
import uvicorn

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram ---
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from dotenv import load_dotenv
from app import create_app

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://https://academy-of-elements-1.onrender.com{WEBHOOK_PATH}"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à URL

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI ---
app = create_app(dp, bot)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook ---
@app.on_event("startup")
async def startup_event():
    await on_startup(bot)

@app.on_event("shutdown")
async def shutdown_event():
    await on_shutdown(bot)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
webhook_requests_handler = SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
)
webhook_requests_handler.register(app, path=WEBHOOK_PATH)

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)
